{"uid":"d98a75274ce16911","name":"Invalid login shows error","fullName":"tests.test_login#test_invalid_login","historyId":"54f8c159bcd2f6b65c58a5cf65b46f64","time":{"start":1757364980856,"stop":1757364980856,"duration":0},"status":"broken","statusMessage":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nfrom unknown error: no chrome binary at /opt/google/chrome/google-chrome\nStacktrace:\n#0 0x5567cdc2e89a <unknown>\n#1 0x5567cd6c4e60 <unknown>\n#2 0x5567cd6fbf52 <unknown>\n#3 0x5567cd6fad0f <unknown>\n#4 0x5567cd7496e1 <unknown>\n#5 0x5567cd748e06 <unknown>\n#6 0x5567cd73af03 <unknown>\n#7 0x5567cd707a5a <unknown>\n#8 0x5567cd7086d1 <unknown>\n#9 0x5567cdbf3e2f <unknown>\n#10 0x5567cdbf7e38 <unknown>\n#11 0x5567cdbdad0c <unknown>\n#12 0x5567cdbf85de <unknown>\n#13 0x5567cdbc21ce <unknown>\n#14 0x5567cdc1c168 <unknown>\n#15 0x5567cdc1c378 <unknown>\n#16 0x5567cdc2d49c <unknown>\n#17 0x7f38bfc11ac3 <unknown>","statusTrace":"@pytest.fixture(scope=\"function\")\n    def driver():\n        opts = get_chrome_options()\n        # This will now look for the chromedriver executable in the system's PATH\n        service = ChromeService()\n>       driver = webdriver.Chrome(service=service, options=opts)\n\nconftest.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:56: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:206: in __init__\n    self.start_session(capabilities)\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:290: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f3f514cc550>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created\\\\nfrom unknown error:...\\\\n#15 0x5567cdc1c378 \\\\u003Cunknown>\\\\n#16 0x5567cdc2d49c \\\\u003Cunknown>\\\\n#17 0x7f38bfc11ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nE       from unknown error: no chrome binary at /opt/google/chrome/google-chrome\nE       Stacktrace:\nE       #0 0x5567cdc2e89a <unknown>\nE       #1 0x5567cd6c4e60 <unknown>\nE       #2 0x5567cd6fbf52 <unknown>\nE       #3 0x5567cd6fad0f <unknown>\nE       #4 0x5567cd7496e1 <unknown>\nE       #5 0x5567cd748e06 <unknown>\nE       #6 0x5567cd73af03 <unknown>\nE       #7 0x5567cd707a5a <unknown>\nE       #8 0x5567cd7086d1 <unknown>\nE       #9 0x5567cdbf3e2f <unknown>\nE       #10 0x5567cdbf7e38 <unknown>\nE       #11 0x5567cdbdad0c <unknown>\nE       #12 0x5567cdbf85de <unknown>\nE       #13 0x5567cdbc21ce <unknown>\nE       #14 0x5567cdc1c168 <unknown>\nE       #15 0x5567cdc1c378 <unknown>\nE       #16 0x5567cdc2d49c <unknown>\nE       #17 0x7f38bfc11ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:229: SessionNotCreatedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1757364980857,"stop":1757364981547,"duration":690},"status":"broken","statusMessage":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nfrom unknown error: no chrome binary at /opt/google/chrome/google-chrome\nStacktrace:\n#0 0x5567cdc2e89a <unknown>\n#1 0x5567cd6c4e60 <unknown>\n#2 0x5567cd6fbf52 <unknown>\n#3 0x5567cd6fad0f <unknown>\n#4 0x5567cd7496e1 <unknown>\n#5 0x5567cd748e06 <unknown>\n#6 0x5567cd73af03 <unknown>\n#7 0x5567cd707a5a <unknown>\n#8 0x5567cd7086d1 <unknown>\n#9 0x5567cdbf3e2f <unknown>\n#10 0x5567cdbf7e38 <unknown>\n#11 0x5567cdbdad0c <unknown>\n#12 0x5567cdbf85de <unknown>\n#13 0x5567cdbc21ce <unknown>\n#14 0x5567cdc1c168 <unknown>\n#15 0x5567cdc1c378 <unknown>\n#16 0x5567cdc2d49c <unknown>\n#17 0x7f38bfc11ac3 <unknown>\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pluggy/_callers.py\", line 38, in run_old_style_hookwrapper\n    res = yield\n          ^^^^^\n  File \"/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pluggy/_callers.py\", line 139, in _multicall\n    teardown.throw(exception)\n    ~~~~~~~~~~~~~~^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pluggy/_callers.py\", line 53, in run_old_style_hookwrapper\n    return result.get_result()\n           ~~~~~~~~~~~~~~~~~^^\n  File \"/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pluggy/_result.py\", line 103, in get_result\n    raise exc.with_traceback(tb)\n  File \"/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pluggy/_callers.py\", line 38, in run_old_style_hookwrapper\n    res = yield\n          ^^^^^\n  File \"/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pluggy/_callers.py\", line 121, in _multicall\n    res = hook_impl.function(*args)\n  File \"/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/_pytest/fixtures.py\", line 1123, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/_pytest/fixtures.py\", line 895, in call_fixture_func\n    fixture_result = next(generator)\n  File \"/home/runner/work/selenium-ci-cd/selenium-ci-cd/conftest.py\", line 26, in driver\n    driver = webdriver.Chrome(service=service, options=opts)\n  File \"/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py\", line 45, in __init__\n    super().__init__(\n    ~~~~~~~~~~~~~~~~^\n        DesiredCapabilities.CHROME[\"browserName\"],\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    ...<3 lines>...\n        keep_alive,\n        ^^^^^^^^^^^\n    )\n    ^\n  File \"/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py\", line 56, in __init__\n    super().__init__(\n    ~~~~~~~~~~~~~~~~^\n        command_executor=ChromiumRemoteConnection(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    ...<6 lines>...\n        options=options,\n        ^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py\", line 206, in __init__\n    self.start_session(capabilities)\n    ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py\", line 290, in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n               ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py\", line 345, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nfrom unknown error: no chrome binary at /opt/google/chrome/google-chrome\nStacktrace:\n#0 0x5567cdc2e89a <unknown>\n#1 0x5567cd6c4e60 <unknown>\n#2 0x5567cd6fbf52 <unknown>\n#3 0x5567cd6fad0f <unknown>\n#4 0x5567cd7496e1 <unknown>\n#5 0x5567cd748e06 <unknown>\n#6 0x5567cd73af03 <unknown>\n#7 0x5567cd707a5a <unknown>\n#8 0x5567cd7086d1 <unknown>\n#9 0x5567cdbf3e2f <unknown>\n#10 0x5567cdbf7e38 <unknown>\n#11 0x5567cdbdad0c <unknown>\n#12 0x5567cdbf85de <unknown>\n#13 0x5567cdbc21ce <unknown>\n#14 0x5567cdc1c168 <unknown>\n#15 0x5567cdc1c378 <unknown>\n#16 0x5567cdc2d49c <unknown>\n#17 0x7f38bfc11ac3 <unknown>","statusTrace":"@pytest.fixture(scope=\"function\")\n    def driver():\n        opts = get_chrome_options()\n        # This will now look for the chromedriver executable in the system's PATH\n        service = ChromeService()\n>       driver = webdriver.Chrome(service=service, options=opts)\n\nconftest.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:56: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:206: in __init__\n    self.start_session(capabilities)\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:290: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f3f514cc550>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created\\\\nfrom unknown error:...\\\\n#15 0x5567cdc1c378 \\\\u003Cunknown>\\\\n#16 0x5567cdc2d49c \\\\u003Cunknown>\\\\n#17 0x7f38bfc11ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nE       from unknown error: no chrome binary at /opt/google/chrome/google-chrome\nE       Stacktrace:\nE       #0 0x5567cdc2e89a <unknown>\nE       #1 0x5567cd6c4e60 <unknown>\nE       #2 0x5567cd6fbf52 <unknown>\nE       #3 0x5567cd6fad0f <unknown>\nE       #4 0x5567cd7496e1 <unknown>\nE       #5 0x5567cd748e06 <unknown>\nE       #6 0x5567cd73af03 <unknown>\nE       #7 0x5567cd707a5a <unknown>\nE       #8 0x5567cd7086d1 <unknown>\nE       #9 0x5567cdbf3e2f <unknown>\nE       #10 0x5567cdbf7e38 <unknown>\nE       #11 0x5567cdbdad0c <unknown>\nE       #12 0x5567cdbf85de <unknown>\nE       #13 0x5567cdbc21ce <unknown>\nE       #14 0x5567cdc1c168 <unknown>\nE       #15 0x5567cdc1c378 <unknown>\nE       #16 0x5567cdc2d49c <unknown>\nE       #17 0x7f38bfc11ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:229: SessionNotCreatedException","steps":[],"attachments":[{"uid":"302f4a484ed635d1","name":"log","source":"302f4a484ed635d1.txt","type":"text/plain","size":361}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_login"},{"name":"host","value":"pkrvm7jw40e0xgp"},{"name":"thread","value":"5550-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"d98a75274ce16911.json","parameterValues":[]}